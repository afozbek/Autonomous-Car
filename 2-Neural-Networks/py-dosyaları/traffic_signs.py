# -*- coding: utf-8 -*-
"""Traffic Signs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XAmB_Frgm_gBdcK95tmVX9DUkMyHHFUM
"""

!git clone https://bitbucket.org/jadslim/german-traffic-signs

!ls german-traffic-signs

import numpy as np
import matplotlib.pyplot as plt
import keras
from keras.models import Sequential
from keras.layers import Dense
from keras.optimizers import Adam
from keras.utils.np_utils import to_categorical
from keras.layers import Dropout, Flatten
from keras.layers.convolutional import Conv2D, MaxPooling2D
import pickle
import pandas as pd
import random

np.random.seed(0)

#Train Data
with open('german-traffic-signs/train.p', 'rb') as f:
  train_data = pickle.load(f)
#Validation data
with open('german-traffic-signs/valid.p', 'rb') as f:
  val_data = pickle.load(f)
with open('german-traffic-signs/test.p', 'rb') as f:
  test_data = pickle.load(f)

print(type(train_data))
X_train, y_train = train_data['features'], train_data['labels']
X_val, y_val =  val_data['features'], val_data['labels']
X_test, y_test = test_data['features'], test_data['labels']

print(X_train.shape)
print(X_val.shape)
print(X_test.shape)

assert(X_train.shape[0] == y_train.shape[0]), "The number of images is not equal to the number of labels"
assert(X_val.shape[0] == y_val.shape[0]), "The number of images is not equal to the number of labels"
assert(X_test.shape[0] == y_test.shape[0]), "The number of images is not equal to the number of labels"
assert(X_train.shape[1:] == (32, 32, 3)), "The dim of the images is not 32 x 32 x 3"
assert(X_val.shape[1:] == (32, 32, 3)), "The dim of the images is not 32 x 32 x 3"
assert(X_test.shape[1:] == (32, 32, 3)), "The dim of the images is not 32 x 32 x 3"

data = pd.read_csv('german-traffic-signs/signnames.csv')

num_of_samples = []

cols = 5
num_classes = 43

fig, axs = plt.subplots(nrows=num_classes, ncols = cols, figsize=(5, 50))
fig.tight_layout()
for i in range(cols):
    for j, row in data.iterrows():
        x_selected = X_train[y_train == j]
        axs[j][i].imshow(x_selected[random.randint(0, len(x_selected - 1)), :, :], cmap=plt.get_cmap("gray"))
        axs[j][i].axis("off")
        if i == 2:
            axs[j][i].set_title(str(j) + "-" + row["SignName"])
            num_of_samples.append(len(x_selected))
    #(index / Series)

print(num_of_samples)
plt.figure(figsize=(12, 4))
plt.bar(range(0, num_classes), num_of_samples)
plt.title("Distribution of the training dataset")
plt.xlabel("Class number")
plt.ylabel("Number of images")

import cv2 


plt.imshow(X_train[560])
plt.axis('off')
print(X_train[560].shape)
print(y_train[560])

#Converts rgb image to greyscale image 3d to 2d
def grayscale(img):
  img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
  return img

img = grayscale(X_train[560])
plt.imshow(img)
plt.axis("off")
print(img.shape) #We will see our image now 2d.

def equalize(img):
  img = cv2.equalizeHist(img) #only accept greyscale img
  return img

img = equalize(img)
plt.imshow(img)
plt.axis("off")
print(img.shape)

def preprocessing(img):
  img = grayscale(img)
  img = equalize(img)
  img = img / 255
  return img

X_train = np.array(list(map(preprocessing, X_train)))
X_val = np.array(list(map(preprocessing, X_val)))
X_test = np.array(list(map(preprocessing, X_test)))

plt.imshow(X_train[random.randint(0, len(X_train) - 1)])
plt.axis("off")
print(X_train.shape)

X_train = X_train.reshape(34799, 32, 32, 1) #reshape the input format
X_val = X_val.reshape(4410, 32, 32, 1) #reshape the input format
X_test = X_test.reshape(12630, 32, 32, 1) #reshape the input format

print(X_train.shape)
print(X_val.shape)
print(X_test.shape)

y_train = to_categorical(y_train, 43)
y_val = to_categorical(y_val, 43)
y_test = to_categorical(y_test, 43)

def leNet_model():
  model = Sequential()
  #5x5 filter uygula feature map sayısı 30 tane olsun
  model.add(Conv2D(filters=30, kernel_size=(5, 5), input_shape=(32, 32, 1),
                  activation='relu')) #28*28*30
  #reduce parameters and helps overfitting
  model.add(MaxPooling2D(pool_size=(2,2))) #14*14*30
  model.add(Conv2D(15, (3, 3), activation='relu')) #12*12*15
  model.add(MaxPooling2D(pool_size=(2, 2))) #6*6*15
  model.add(Flatten()) #Takes Convoluted data and flatten it to 1d format
  model.add(Dense(units = 500, activation='relu'))
  model.add(Dropout(rate = 0.5))
  model.add(Dense(num_classes, activation = 'softmax'))
  #Compile model
  model.compile(Adam(lr = 0.01), loss = 'categorical_crossentropy',
               metrics = ['accuracy'])
  return model

model = leNet_model()
print(model.summary())

model.fit(X_train, y_train, epochs=10, 
         validation_data = (X_val, y_val),
         batch_size=400, verbose=1, shuffle=1)

